#!/usr/bin/env node

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import dotenv from 'dotenv';
dotenv.config({ path: '.env.local' });

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ API endpoints
import https from 'https';
import http from 'http';

const BASE_URL = process.env.BASE_URL || 'https://ponyatno-miniapp-preview.vercel.app';

function makeRequest(url) {
  return new Promise((resolve, reject) => {
    const client = url.startsWith('https:') ? https : http;
    
    const req = client.request(url, { method: 'GET' }, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        resolve({
          status: res.statusCode,
          headers: res.headers,
          data: data
        });
      });
    });
    
    req.on('error', reject);
    req.setTimeout(10000, () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });
    
    req.end();
  });
}

async function checkAPI() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints...\n');
  
  const endpoints = [
    { name: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', url: `${BASE_URL}/` },
    { name: 'API: analyze-text', url: `${BASE_URL}/api/analyze-text` },
    { name: 'API: analyze-text-gpt', url: `${BASE_URL}/api/analyze-text-gpt` },
    { name: 'API: classify-text', url: `${BASE_URL}/api/classify-text` }
  ];
  
  for (const endpoint of endpoints) {
    try {
      console.log(`üì° ${endpoint.name}:`);
      const response = await makeRequest(endpoint.url);
      
      if (response.status === 200) {
        console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: ${response.status} OK`);
      } else if (response.status === 405) {
        console.log(`   ‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å: ${response.status} Method Not Allowed (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è API)`);
      } else {
        console.log(`   ‚ùå –°—Ç–∞—Ç—É—Å: ${response.status}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      if (response.headers['content-type']) {
        console.log(`   üìÑ Content-Type: ${response.headers['content-type']}`);
      }
      
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    console.log('');
  }
  
  console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log('   YANDEX_VISION_API_KEY:', process.env.YANDEX_VISION_API_KEY ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  console.log('   YANDEX_FOLDER_ID:', process.env.YANDEX_FOLDER_ID ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

checkAPI().catch(console.error);
