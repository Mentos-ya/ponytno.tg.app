#!/usr/bin/env node

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import dotenv from 'dotenv';
dotenv.config({ path: '.env.local' });

// –¢–µ—Å—Ç–∏—Ä—É–µ–º Yandex GPT API
async function testYandexGPT() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex GPT API...\n');
  
  const apiKey = process.env.YANDEX_GPT_API_KEY;
  const folderId = process.env.YANDEX_FOLDER_ID;
  
  if (!apiKey || !folderId) {
    console.log('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    return;
  }
  
  console.log('‚úÖ API –∫–ª—é—á:', apiKey.substring(0, 10) + '...');
  console.log('‚úÖ Folder ID:', folderId);
  
  const testText = "DOUBLE CHEESEBURGER";
  
  const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏–∑ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ —Ç–∏–ø:

–¢–µ–∫—Å—Ç: "${testText}"
–ö–æ–Ω—Ç–µ–∫—Å—Ç: –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞

–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø —Ç–µ–∫—Å—Ç–∞:
- "title" - –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –∑–∞–≥–æ–ª–æ–≤–æ–∫, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–µ–Ω—é
- "price" - —Ü–µ–Ω–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Å—É–º–º–∞
- "description" - –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —Å–æ—Å—Ç–∞–≤

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: title, price –∏–ª–∏ description`;

  try {
    console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Yandex GPT...');
    
    const response = await fetch('https://llm.api.cloud.yandex.net/foundationModels/v1/completion', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Api-Key ${apiKey}`
      },
      body: JSON.stringify({
        modelUri: `gpt://${folderId}/yandexgpt/latest`,
        completionOptions: {
          stream: false,
          temperature: 0.1,
          maxTokens: 10
        },
        messages: [
          {
            role: 'user',
            text: prompt
          }
        ]
      })
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ –û—Ç–≤–µ—Ç Yandex GPT:', result);
      
      if (result.result && result.result.alternatives && result.result.alternatives[0]) {
        const classification = result.result.alternatives[0].text.trim();
        console.log('üéØ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:', classification);
      }
    } else {
      const errorText = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ API:', response.status, errorText);
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  }
}

testYandexGPT().catch(console.error);
