// –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏—ë–º–∞ –ª–æ–≥–æ–≤ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
const http = require('http');
const fs = require('fs');
const path = require('path');
const https = require('https');

const PORT = 3030;

const clients = new Set()
const STATIC_DIR = path.join(__dirname, 'dist')

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: '.env.local' })

function getContentType(filePath) {
  const ext = path.extname(filePath).toLowerCase()
  switch (ext) {
    case '.html': return 'text/html; charset=utf-8'
    case '.js': return 'application/javascript; charset=utf-8'
    case '.css': return 'text/css; charset=utf-8'
    case '.svg': return 'image/svg+xml'
    case '.png': return 'image/png'
    case '.jpg':
    case '.jpeg': return 'image/jpeg'
    case '.webp': return 'image/webp'
    case '.ico': return 'image/x-icon'
    default: return 'application/octet-stream'
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ YandexGPT API
function callYandexGPT(apiKey, folderId, prompt, maxTokens = 100) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify({
      modelUri: `gpt://${folderId}/yandexgpt/latest`,
      completionOptions: {
        stream: false,
        temperature: 0.1,
        maxTokens: maxTokens
      },
      messages: [
        {
          role: 'user',
          text: prompt
        }
      ]
    })

    const options = {
      hostname: 'llm.api.cloud.yandex.net',
      path: '/foundationModels/v1/completion',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Api-Key ${apiKey}`,
        'x-folder-id': folderId,
        'Content-Length': Buffer.byteLength(postData)
      }
    }

    const req = https.request(options, (res) => {
      let data = ''
      res.on('data', (chunk) => {
        data += chunk
      })
      res.on('end', () => {
        if (res.statusCode >= 200 && res.statusCode < 300) {
          try {
            resolve(JSON.parse(data))
          } catch (e) {
            reject(new Error('Failed to parse YandexGPT API response: ' + e.message))
          }
        } else {
          reject(new Error(`YandexGPT API returned status ${res.statusCode}: ${data}`))
        }
      })
    })

    req.on('error', (e) => {
      reject(e)
    })

    req.write(postData)
    req.end()
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: Vision OCR + GPT –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (–ü–†–ò–û–†–ò–¢–ï–¢ 1)
async function analyzeWithYandexGPT(imageData, mimeType = 'image/jpeg') {
  const visionApiKey = process.env.YANDEX_VISION_API_KEY?.trim()
  const gptApiKey = process.env.YANDEX_GPT_API_KEY?.trim()
  const folderId = process.env.YANDEX_FOLDER_ID?.trim()

  if (!visionApiKey || !gptApiKey || !folderId) {
    throw new Error('Yandex API configuration missing (need both Vision and GPT keys)')
  }

  console.log('üîç –≠—Ç–∞–ø 1: Yandex Vision OCR')
  
  // –≠—Ç–∞–ø 1: Vision API –¥–ª—è OCR
  const visionResult = await analyzeWithYandexVision(imageData, mimeType)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ Vision API
  if (!visionResult || !visionResult.results || !visionResult.results[0]) {
    throw new Error('Vision API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
  }
  
  const textDetection = visionResult.results[0].results?.[0]?.textDetection
  if (!textDetection || !textDetection.pages || textDetection.pages.length === 0) {
    throw new Error('Vision API –Ω–µ –Ω–∞—à—ë–ª —Ç–µ–∫—Å—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏')
  }
  
  console.log('üìù Vision —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ç–µ–∫—Å—Ç')
  console.log('ü§ñ –≠—Ç–∞–ø 2: –£–º–Ω—ã–π AI-–∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é —á–µ—Ä–µ–∑ YandexGPT')
  
  // –≠—Ç–∞–ø 2: –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
  const page = textDetection.pages[0]
  const allWords = []
  
  if (page.blocks) {
    page.blocks.forEach(block => {
      if (block.lines) {
        block.lines.forEach(line => {
          if (line.words) {
            line.words.forEach(word => {
              const bbox = word.boundingBox ? {
                x0: parseInt(word.boundingBox.vertices[0].x),
                y0: parseInt(word.boundingBox.vertices[0].y),
                x1: parseInt(word.boundingBox.vertices[2].x),
                y1: parseInt(word.boundingBox.vertices[2].y)
              } : null
              
              if (bbox) {
                allWords.push({
                  text: word.text,
                  bbox: bbox,
                  fontSize: bbox.y1 - bbox.y0, // –í—ã—Å–æ—Ç–∞ = —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
                  confidence: word.confidence || 0
                })
              }
            })
          }
        })
      }
    })
  }
  
  if (allWords.length === 0) {
    throw new Error('Vision API –Ω–µ –Ω–∞—à—ë–ª —Å–ª–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏')
  }
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–ø–æ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ)
  const lines = []
  const tolerance = 10 // –î–æ–ø—É—Å–∫ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
  
  allWords.forEach(word => {
    const midY = (word.bbox.y0 + word.bbox.y1) / 2
    let foundLine = false
    
    for (let line of lines) {
      const lineMidY = (line.minY + line.maxY) / 2
      if (Math.abs(midY - lineMidY) < tolerance) {
        line.words.push(word)
        line.minY = Math.min(line.minY, word.bbox.y0)
        line.maxY = Math.max(line.maxY, word.bbox.y1)
        foundLine = true
        break
      }
    }
    
    if (!foundLine) {
      lines.push({
        words: [word],
        minY: word.bbox.y0,
        maxY: word.bbox.y1
      })
    }
  })
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ
  lines.sort((a, b) => a.minY - b.minY)
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ
  lines.forEach(line => {
    line.words.sort((a, b) => a.bbox.x0 - b.bbox.x0)
    line.text = line.words.map(w => w.text).join(' ')
    line.avgFontSize = line.words.reduce((sum, w) => sum + w.fontSize, 0) / line.words.length
  })
  
  console.log(`üìä –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ ${lines.length} —Å—Ç—Ä–æ–∫`)
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT
  const menuContext = lines.map((line, i) => {
    return `–°—Ç—Ä–æ–∫–∞ ${i + 1} (Y:${Math.round(line.minY)}, —Ä–∞–∑–º–µ—Ä:${Math.round(line.avgFontSize)}px): ${line.text}`
  }).join('\n')
  
  const prompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–µ–Ω—é –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É.

–°–¢–†–ê–ù–ò–¶–ê –ú–ï–ù–Æ (${lines.length} —Å—Ç—Ä–æ–∫):
${menuContext}

–°–¢–†–£–ö–¢–£–†–ê –ú–ï–ù–Æ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:
–í –ª—é–±–æ–º –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –í–°–ï–ì–î–ê –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ (title). –≠—Ç–æ –ì–õ–ê–í–ù–ê–Ø —Å—É—â–Ω–æ—Å—Ç—å, –∏—â–∏ –∏—Ö –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å!

–¢–∏–ø–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–ª–æ–∫–∞ –º–µ–Ω—é:
1. TITLE (–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞) - –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ù–ê –ù–ï–°–ö–û–õ–¨–ö–ò–• –°–¢–†–û–ö–ê–•! –ö—Ä—É–ø–Ω—ã–π —Ç–µ–∫—Å—Ç, –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
2. DESCRIPTION (–æ–ø–∏—Å–∞–Ω–∏–µ) - –í–°–ï —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏/—Å–æ—Å—Ç–∞–≤–æ–º (–º–∞–ª–µ–Ω—å–∫–∏–π —Ç–µ–∫—Å—Ç, —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã)
3. PRICE (—Ü–µ–Ω–∞) - —á–∏—Å—Ç–æ–µ —á–∏—Å–ª–æ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

–ó–ê–î–ê–ß–ê: –û–ø—Ä–µ–¥–µ–ª–∏ –¥–ª—è –ö–ê–ñ–î–û–ô —Å—Ç—Ä–æ–∫–∏ –û–î–ù–£ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:

–ö–ê–¢–ï–ì–û–†–ò–ò (–≤—ã–±–µ—Ä–∏ –°–¢–†–û–ì–û –û–î–ù–£):
- price_modifier: —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞/–≤–∞—Ä–∏–∞–Ω—Ç–∞ –±–ª—é–¥–∞ (DOUBLE, TRIPLE, SMALL, LARGE - –∫—Ä—É–ø–Ω—ã–π —Ç–µ–∫—Å—Ç, –∑–∞–≥–ª–∞–≤–Ω—ã–µ, –ù–ê–î –æ—Å–Ω–æ–≤–Ω—ã–º title)
- title: –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (–ö–†–£–ü–ù–´–ô –¢–ï–ö–°–¢, –ó–ê–ì–õ–ê–í–ù–´–ï –ë–£–ö–í–´, –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ 2-3 —Å—Ç—Ä–æ–∫–∞—Ö –ø–æ–¥—Ä—è–¥, –º–∏–Ω–∏–º—É–º 3+ –±—É–∫–≤)
- price: –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≤—Å—è —Å—Ç—Ä–æ–∫–∞ —ç—Ç–æ –ß–ò–°–¢–û–ï –ß–ò–°–õ–û (600, 930, 1190)
- description: –æ–ø–∏—Å–∞–Ω–∏–µ, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–º–∞–ª–µ–Ω—å–∫–∏–π —Ç–µ–∫—Å—Ç, —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ title)

üîµ –ù–û–í–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø - price_modifier:
‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–∞: DOUBLE, TRIPLE, SMALL, MEDIUM, LARGE
‚úÖ –û–±—ã—á–Ω–æ –∏–¥—É—Ç –í–´–®–ï –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
‚úÖ –ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–≤–æ–µ–π —Ü–µ–Ω–µ
‚úÖ –ö—Ä—É–ø–Ω—ã–π —Ç–µ–∫—Å—Ç, –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã, –ù–û —ç—Ç–æ –ù–ï –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞!

–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
–°—Ç—Ä–æ–∫–∞ 1: DOUBLE TRIPLE ‚Üí price_modifier (–≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–∞)
–°—Ç—Ä–æ–∫–∞ 2: CHEESEBURGER ‚Üí title (—Å–∞–º–æ –±–ª—é–¥–æ)
–°—Ç—Ä–æ–∫–∞ 3: | 930 | 1190 ‚Üí —Å–∏–º–≤–æ–ª—ã –∏ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞

‚ö†Ô∏è –í–ê–ñ–ù–û - –ß–¢–û –ù–ï –Ø–í–õ–Ø–ï–¢–°–Ø TITLE:
‚ùå –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: "|", "/", "-", "‚Ä¢" ‚Üí –ù–ï title (—ç—Ç–æ description!)
‚ùå –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ < 2 –±—É–∫–≤: "|", "I", "L" ‚Üí –ù–ï title (—ç—Ç–æ description!)
‚ùå –¢–û–õ–¨–ö–û —Ü–∏—Ñ—Ä—ã: "930", "1190" ‚Üí —ç—Ç–æ price, –ù–ï title!
‚ùå –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–∞: DOUBLE, TRIPLE ‚Üí —ç—Ç–æ price_modifier, –ù–ï title!

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ú–ù–û–ì–û–°–¢–†–û–ß–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò:
üî• –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –ú–û–ñ–ï–¢ –±—ã—Ç—å —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ –ù–ï–°–ö–û–õ–¨–ö–û –°–¢–†–û–ö!

üéØ –ü–†–ê–í–ò–õ–û –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø –ó–ê–ì–û–õ–û–í–ö–û–í:
–ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –ø–æ–¥—Ä—è–¥ –∏–º–µ—é—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ title (–∫—Ä—É–ø–Ω—ã–π —Ç–µ–∫—Å—Ç, –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã) 
–ò –º–µ–∂–¥—É –Ω–∏–º–∏ –ù–ï–¢ description/price ‚Üí —ç—Ç–æ –û–î–ù–û –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞!

–í–°–ï —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ title:
- SCRAMBLED EGGS (—Å—Ç—Ä–æ–∫–∞ 1) ‚Üí title
- ON BRIOCHE (—Å—Ç—Ä–æ–∫–∞ 2) ‚Üí title (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ!)
- eggs, cheese... (—Å—Ç—Ä–æ–∫–∞ 3) ‚Üí description (–Ω–∞—á–∞–ª–æ –æ–ø–∏—Å–∞–Ω–∏—è)

–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "SCRAMBLED EGGS ON BRIOCHE"

‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:
- SCRAMBLED EGGS ‚Üí title
- ON BRIOCHE ‚Üí description (–û–®–ò–ë–ö–ê!)

‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û:
- SCRAMBLED EGGS ‚Üí title
- ON BRIOCHE ‚Üí title (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è!)

üîë –ö–ê–ö –û–ü–†–ï–î–ï–õ–ò–¢–¨, –ß–¢–û –≠–¢–û –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï TITLE:
1. –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ö–†–£–ü–ù–ê–Ø (size ‚âà –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∞—è, > 18px)
2. –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –ó–ê–ì–õ–ê–í–ù–´–• –±—É–∫–≤–∞—Ö
3. –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ë–ï–ó –∑–∞–ø—è—Ç—ã—Ö
4. –ù–ï–¢ description –º–µ–∂–¥—É –Ω–∏–º–∏

–ü—Ä–∏–º–µ—Ä—ã –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö title:
–ë–ª–æ–∫ 1:
- –°—Ç—Ä–æ–∫–∞ 1: SCRAMBLED EGGS ‚Üí title (—á–∞—Å—Ç—å 1)
- –°—Ç—Ä–æ–∫–∞ 2: ON BRIOCHE ‚Üí title (—á–∞—Å—Ç—å 2 - –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ!)
- –°—Ç—Ä–æ–∫–∞ 3: 600 ‚Üí price
–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "SCRAMBLED EGGS ON BRIOCHE"

–ë–ª–æ–∫ 2:
- –°—Ç—Ä–æ–∫–∞ 5: BRIOCHE WITH ‚Üí title (—á–∞—Å—Ç—å 1)
- –°—Ç—Ä–æ–∫–∞ 6: GUACAMOLE AND SALMON ‚Üí title (—á–∞—Å—Ç—å 2 - –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ!)
- –°—Ç—Ä–æ–∫–∞ 7: 950 ‚Üí price
–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "BRIOCHE WITH GUACAMOLE AND SALMON"

–ü—Ä–∏–∑–Ω–∞–∫–∏ title (–¥–∞–∂–µ –Ω–∞ 2-3 —Å—Ç—Ä–æ–∫–∞—Ö):
‚úÖ –ö–†–£–ü–ù–´–ô —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (size > 18px)
‚úÖ –ó–ê–ì–õ–ê–í–ù–´–ï –ë–£–ö–í–´
‚úÖ –ù–ï–¢ –∑–∞–ø—è—Ç—ã—Ö
‚úÖ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–∫–∏—Ö —Å—Ç—Ä–æ–∫ –ü–û–î–†–Ø–î = –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
‚úÖ –î–û –ø–µ—Ä–≤–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (description)

–ü—Ä–∏–∑–Ω–∞–∫–∏ description:
‚úÖ –ú–ê–õ–ï–ù–¨–ö–ò–ô —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (size < 20px)
‚úÖ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã (lowercase)
‚úÖ –∑–∞–ø—è—Ç—ã–µ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ (eggs, cheese, tomatoes)
‚úÖ –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ title

–ü–†–ê–í–ò–õ–ê –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò:
1. –ó–ê–ì–û–õ–û–í–ö–ò (title) - —Å–º–æ—Ç—Ä–∏ –Ω–∞ —Ä–∞–∑–º–µ—Ä –∏ —Ä–µ–≥–∏—Å—Ç—Ä!
   - –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ö–†–£–ü–ù–ê–Ø (size > 20px) –ò –ó–ê–ì–õ–ê–í–ù–´–ï –ë–£–ö–í–´ ‚Üí —ç—Ç–æ title
   - title –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è 2-3 —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥—Ä—è–¥ (–≤—Å–µ –∫—Ä—É–ø–Ω—ã–µ, –≤—Å–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ)
   - –°–º–æ—Ç—Ä–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç, –Ω–æ –Ω–∞ SIZE –∏ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É!
   
2. –û–ü–ò–°–ê–ù–ò–Ø (description) - –º–∞–ª–µ–Ω—å–∫–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –í–°–ï–• title!
   - –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –í–°–ï —Å—Ç—Ä–æ–∫–∏ title
   - –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
   - –°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, –∑–∞–ø—è—Ç—ã–µ
   
3. –¶–ï–ù–´ (price):
   - –¢–æ–ª—å–∫–æ –ß–ò–°–¢–û–ï –ß–ò–°–õ–û –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
   - 600, 930, 1190 (–±–µ–∑ –±—É–∫–≤, –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä)

üî• –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –ü–†–ê–í–ò–õ–û - –¶–ï–ù–ê –í–ù–£–¢–†–ò –ù–ê–ó–í–ê–ù–ò–Ø:
–ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –í –°–¢–†–û–ö–ï —Å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ (title),
–ò –ü–û–°–õ–ï —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–π –∂–µ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ —Å–Ω–æ–≤–∞ –∏–¥—É—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã:
‚Üí –í–°–ï –∑–∞–≥–ª–∞–≤–Ω—ã–µ —Å–ª–æ–≤–∞ (–¥–æ –∏ –ø–æ—Å–ª–µ —Ü–µ–Ω—ã) = title
‚Üí –¢–û–õ–¨–ö–û —á–∏—Å–ª–æ = price

–ü—Ä–∏–º–µ—Ä:
–°—Ç—Ä–æ–∫–∞ 11 (size: 20px): ZUCCHINI PANCAKES WITH | 980
–°—Ç—Ä–æ–∫–∞ 12 (size: 18px): SALMON AND EGGS

–ê–Ω–∞–ª–∏–∑:
- ZUCCHINI ‚Üí title (–∫—Ä—É–ø–Ω—ã–π, –∑–∞–≥–ª–∞–≤–Ω—ã–µ)
- PANCAKES ‚Üí title (–∫—Ä—É–ø–Ω—ã–π, –∑–∞–≥–ª–∞–≤–Ω—ã–µ)
- WITH ‚Üí title (–∫—Ä—É–ø–Ω—ã–π, –∑–∞–≥–ª–∞–≤–Ω—ã–µ)
- 980 ‚Üí price (—á–∏—Å–ª–æ)
- SALMON ‚Üí title (–∫—Ä—É–ø–Ω—ã–π, –∑–∞–≥–ª–∞–≤–Ω—ã–µ - –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —Ü–µ–Ω—ã!)
- AND ‚Üí title (–∫—Ä—É–ø–Ω—ã–π, –∑–∞–≥–ª–∞–≤–Ω—ã–µ - –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï!)
- EGGS ‚Üí title (–∫—Ä—É–ø–Ω—ã–π, –∑–∞–≥–ª–∞–≤–Ω—ã–µ - –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï!)

–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "ZUCCHINI PANCAKES WITH SALMON AND EGGS"
–¶–µ–Ω–∞: 980

‚ùó–í–ê–ñ–ù–û: –ï—Å–ª–∏ –ü–û–°–õ–ï price —Å–Ω–æ–≤–∞ –∏–¥—É—Ç –∫—Ä—É–ø–Ω—ã–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã - —ç—Ç–æ –ù–ï –Ω–æ–≤–æ–µ –±–ª—é–¥–æ, 
–∞ –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –Ω–∞–∑–≤–∞–Ω–∏—è! –ù–æ–≤–æ–µ –±–ª—é–¥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å description –∏–ª–∏ price_modifier.

üéØ –ó–û–õ–û–¢–û–ï –ü–†–ê–í–ò–õ–û - –°–¢–†–£–ö–¢–£–†–ê –ë–õ–û–ö–ê –ú–ï–ù–Æ:
–ö–∞–∂–¥—ã–π –±–ª–æ–∫ –º–µ–Ω—é –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:
1. price_modifier (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) - –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–∞
2. title (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) - –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (1-3 —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥—Ä—è–¥)
3. price (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) - —Ü–µ–Ω–∞
4. description (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) - –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤

‚ùó –ö–õ–Æ–ß–ï–í–û–ï –ü–†–ê–í–ò–õ–û: Title –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è description!

–ï—Å–ª–∏ –ø–æ—Å–ª–µ title –ù–ï–¢ description ‚Üí —ç—Ç–æ –µ—â–µ –ù–ï –∫–æ–Ω–µ—Ü –Ω–∞–∑–≤–∞–Ω–∏—è!
–ü—Ä–æ–¥–æ–ª–∂–∞–π –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –≤—Å–µ title –ø–æ–¥—Ä—è–¥ –¥–æ –ø–µ—Ä–≤–æ–≥–æ description.

–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞:
‚úÖ ZUCCHINI PANCAKES WITH ‚Üí title (—Å—Ç—Ä–æ–∫–∞ 1)
‚úÖ 980 ‚Üí price (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏)
‚úÖ SALMON AND EGGS ‚Üí title (—Å—Ç—Ä–æ–∫–∞ 2 - –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ, —Ç.–∫. –ù–ï–¢ description!)
‚úÖ zucchini, salmon, eggs... ‚Üí description (–í–û–¢ –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è title!)

–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "ZUCCHINI PANCAKES WITH SALMON AND EGGS"

–ü—Ä–∏–º–µ—Ä –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ì–û —Ä–∞–∑–±–∏–µ–Ω–∏—è:
‚ùå ZUCCHINI PANCAKES WITH ‚Üí title –±–ª–æ–∫–∞ 1
‚ùå 980 ‚Üí price –±–ª–æ–∫–∞ 1
‚ùå (–ù–ï–¢ description!) ‚Üí –û–®–ò–ë–ö–ê! –ë–ª–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω!
‚ùå SALMON AND EGGS ‚Üí title –±–ª–æ–∫–∞ 2 (–û–®–ò–ë–ö–ê!)

–ó–ê–ü–û–ú–ù–ò: –ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ title –ü–û–î–†–Ø–î (–¥–∞–∂–µ —á–µ—Ä–µ–∑ price) = –û–î–ù–û –Ω–∞–∑–≤–∞–Ω–∏–µ,
–ø–æ–∫–∞ –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è description!

–ü–†–ò–ú–ï–† –ê–ù–ê–õ–ò–ó–ê:
–°—Ç—Ä–æ–∫–∞ 1 (Y:25, —Ä–∞–∑–º–µ—Ä:22px): DOUBLE TRIPLE
‚Üí category: "price_modifier" (–∫—Ä—É–ø–Ω—ã–π, –∑–∞–≥–ª–∞–≤–Ω—ã–µ, –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–∞ - –ù–ê–î –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º!)

–°—Ç—Ä–æ–∫–∞ 2 (Y:66, —Ä–∞–∑–º–µ—Ä:20px): CHEESEBURGER
‚Üí category: "title" (–∫—Ä—É–ø–Ω—ã–π, –∑–∞–≥–ª–∞–≤–Ω—ã–µ - –û–°–ù–û–í–ù–û–ï –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞!)

–°—Ç—Ä–æ–∫–∞ 3 (Y:88, —Ä–∞–∑–º–µ—Ä:20px): | 930 | 1190
‚Üí category: "description" (—Å–∏–º–≤–æ–ª—ã "|" –∏ —Ü–∏—Ñ—Ä—ã 930, 1190 - –±—É–¥—É—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–º)

–°—Ç—Ä–æ–∫–∞ 4 (Y:111, —Ä–∞–∑–º–µ—Ä:14px): eggs, arugula, brioche, cream
‚Üí category: "description" (–º–∞–ª–µ–Ω—å–∫–∏–π, —Å—Ç—Ä–æ—á–Ω—ã–µ, –∑–∞–ø—è—Ç—ã–µ - –æ–ø–∏—Å–∞–Ω–∏–µ!)

‚ùó –ü–û–ú–ù–ò: 
- DOUBLE, TRIPLE –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º ‚Üí price_modifier (–ù–ï title!)
- –°–∏–º–≤–æ–ª—ã "|", "/", "-" –ù–ò–ö–û–ì–î–ê –Ω–µ title!
- –û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (CHEESEBURGER) ‚Üí title!

–í–ï–†–ù–ò –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ (–±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö –≤ category):
[{"line": 1, "category": "title"}, {"line": 2, "category": "description"}, ...]`

  console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–Ω—é –≤ YandexGPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...')
  
  let classifiedWords = []
  
  try {
    const gptResult = await callYandexGPT(gptApiKey, folderId, prompt, 1000)
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
    if (gptResult.result?.usage) {
      const usage = gptResult.result.usage
      console.log('üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ YandexGPT:')
      console.log(`   Input tokens: ${usage.inputTextTokens || 0}`)
      console.log(`   Output tokens: ${usage.completionTokens || 0}`)
      console.log(`   Total tokens: ${usage.totalTokens || 0}`)
      
      // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è YandexGPT Lite (0.15‚ÇΩ –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤)
      const estimatedCost = ((usage.totalTokens || 0) / 1000) * 0.15
      console.log(`   üìä –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å GPT: ~${estimatedCost.toFixed(4)}‚ÇΩ`)
    }
    
    const gptText = gptResult.result?.alternatives?.[0]?.message?.text?.trim()
    
    if (!gptText) {
      throw new Error('YandexGPT –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç')
    }
    
    console.log('üì¶ –û—Ç–≤–µ—Ç GPT –ø–æ–ª—É—á–µ–Ω, –ø–∞—Ä—Å–∏–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é...')
    
    // –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ ```json ... ```)
    let classification
    const jsonMatch = gptText.match(/\[[\s\S]*\]/)
    if (jsonMatch) {
      classification = JSON.parse(jsonMatch[0])
    } else {
      classification = JSON.parse(gptText)
    }
    
    console.log(`‚úÖ GPT –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª ${classification.length} —Å—Ç—Ä–æ–∫`)
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∫ —Å–ª–æ–≤–∞–º
    lines.forEach((line, lineIndex) => {
      const lineClassification = classification.find(c => c.line === lineIndex + 1)
      let category = lineClassification?.category || 'description'
      
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–ø—è—Ç—ã—Ö: –µ—Å–ª–∏ GPT –≤–µ—Ä–Ω—É–ª "title, price" ‚Üí –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ
      if (typeof category === 'string' && category.includes(',')) {
        category = category.split(',')[0].trim()
        console.log(`‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ —Å—Ç—Ä–æ–∫–∏ ${lineIndex + 1}: "${lineClassification.category}" ‚Üí "${category}"`)
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —É–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
      line.words.forEach(word => {
        let wordCategory = category
        const text = word.text.trim()
        const isNumber = /^\d+$/.test(text)
        
        // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –§–ò–õ–¨–¢–†: –ß–∏—Å—Ç—ã–µ —á–∏—Å–ª–∞ –í–°–ï–ì–î–ê price (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ GPT)
        if (isNumber) {
          wordCategory = 'price'
          if (category !== 'price') {
            console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —á–∏—Å–ª–∞ "${text}": ${category} ‚Üí price`)
          }
        }
        // –§–ò–õ–¨–¢–† –¥–ª—è title: –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∏–º–≤–æ–ª–æ–º –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–º —Å–ª–æ–≤–æ–º
        else if (category === 'title') {
          const letterCount = (text.match(/[a-zA-Z–∞-—è–ê-–Ø—ë–Å]/g) || []).length
          
          // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 2 –±—É–∫–≤ –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã ‚Üí —ç—Ç–æ description (–Ω–µ title!)
          if (letterCount < 2 || /^[|\/\-‚Ä¢.,;:!?]+$/.test(text)) {
            wordCategory = 'description'
            console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–∏–º–≤–æ–ª–∞ "${text}": title ‚Üí description`)
          }
        }
        
        classifiedWords.push({
          text: word.text,
          category: wordCategory,
          bbox: word.bbox
        })
      })
    })
    
    console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ AI-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫ ${classifiedWords.length} —Å–ª–æ–≤–∞–º`)
    
  } catch (gptError) {
    console.warn('‚ö†Ô∏è GPT-–∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É:', gptError.message)
    
    // Fallback –Ω–∞ —ç–≤—Ä–∏—Å—Ç–∏–∫—É
    allWords.forEach(word => {
      let category = 'description'
      if (/^\d+$/.test(word.text)) {
        category = 'price'
      } else if (word.text.length > 2 && word.text === word.text.toUpperCase()) {
        category = 'title'
      }
      
      classifiedWords.push({
        text: word.text,
        category: category,
        bbox: word.bbox
      })
    })
    
    console.log(`‚úÖ Fallback: –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ ${classifiedWords.length} —Å–ª–æ–≤ (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)`)
  }
  
  return {
    words: classifiedWords,
    totalText: allWords.map(w => w.text).join(' '),
    totalWords: classifiedWords.length,
    source: 'yandex-vision-gpt'
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è Yandex Vision API (–ü–†–ò–û–†–ò–¢–ï–¢ 2 - fallback)
async function analyzeWithYandexVision(imageData, mimeType = 'image/jpeg') {
  const apiKey = process.env.YANDEX_VISION_API_KEY?.trim()
  const folderId = process.env.YANDEX_FOLDER_ID?.trim()

  if (!apiKey || !folderId) {
    throw new Error('Yandex Vision API configuration missing')
  }

  // –£–±–∏—Ä–∞–µ–º data:image/jpeg;base64, –µ—Å–ª–∏ –µ—Å—Ç—å
  const base64Data = imageData.includes(',') ? imageData.split(',')[1] : imageData
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  console.log(`üìä –†–∞–∑–º–µ—Ä base64 –¥–∞–Ω–Ω—ã—Ö: ${base64Data.length} —Å–∏–º–≤–æ–ª–æ–≤`)
  console.log(`üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${Math.round(base64Data.length * 0.75 / 1024)} KB`)

  return new Promise((resolve, reject) => {
    const postData = JSON.stringify({
      folderId: folderId,
      analyze_specs: [
        {
          content: base64Data,
          features: [
            {
              type: 'TEXT_DETECTION',
              text_detection_config: {
                language_codes: ['ru', 'en']
              }
            }
          ]
        }
      ]
    })

    const options = {
      hostname: 'vision.api.cloud.yandex.net',
      port: 443,
      path: '/vision/v1/batchAnalyze',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Api-Key ${apiKey}`,
        'Content-Length': Buffer.byteLength(postData)
      }
    }

    const req = https.request(options, (res) => {
      let data = ''
      res.on('data', (chunk) => data += chunk)
      res.on('end', () => {
        try {
          const result = JSON.parse(data)
          if (res.statusCode === 200) {
            resolve(result)
          } else {
            reject(new Error(`Vision API error: ${res.statusCode} - ${data}`))
          }
        } catch (error) {
          reject(new Error(`Failed to parse Vision API response: ${error.message}`))
        }
      })
    })

    req.on('error', (error) => {
      reject(new Error(`Vision API request failed: ${error.message}`))
    })

    req.write(postData)
    req.end()
  })
}

function serveStatic(req, res) {
  const urlPath = decodeURI(req.url.split('?')[0])
  let filePath = path.join(STATIC_DIR, urlPath)
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  if (!filePath.startsWith(STATIC_DIR)) {
    res.writeHead(403)
    res.end('Forbidden')
    return true
  }
  // –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–ª–∏ –∫–æ—Ä–µ–Ω—å ‚Äî –æ—Ç–¥–∞—ë–º index.html (SPA)
  if (urlPath === '/' || fs.existsSync(filePath) && fs.statSync(filePath).isDirectory()) {
    filePath = path.join(STATIC_DIR, 'index.html')
  }
  if (fs.existsSync(filePath)) {
    res.writeHead(200, { 'Content-Type': getContentType(filePath) })
    if (req.method === 'HEAD') {
      res.end()
    } else {
      fs.createReadStream(filePath).pipe(res)
    }
    return true
  }
  // –ü–æ–ø—Ä–æ–±—É–µ–º assets/ –∏–∑ Vite
  const assetsPath = path.join(STATIC_DIR, 'assets', path.basename(urlPath))
  if (fs.existsSync(assetsPath)) {
    res.writeHead(200, { 'Content-Type': getContentType(assetsPath) })
    if (req.method === 'HEAD') {
      res.end()
    } else {
      fs.createReadStream(assetsPath).pipe(res)
    }
    return true
  }
  return false
}

const server = http.createServer((req, res) => {
  // CORS –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å localhost:5173
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }

  // –ü—Ä–æ—Å—Ç—ã–µ GET endpoints –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∂–∏–≤–æ—Å—Ç–∏
  if (req.method === 'GET' && req.url === '/health') {
    res.writeHead(200, { 'Content-Type': 'text/plain' })
    res.end('OK')
    return
  }

  // –û—Ç–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏ –∏ SPA fallback (–¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ API)
  if ((req.method === 'GET' || req.method === 'HEAD') && serveStatic(req, res)) {
    return
  }

  // SSE –ø–æ—Ç–æ–∫ –ª–æ–≥–æ–≤
  if (req.method === 'GET' && req.url === '/stream') {
    res.writeHead(200, {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      Connection: 'keep-alive',
      'Access-Control-Allow-Origin': '*',
    })
    res.write(': connected\n\n')
    clients.add(res)
    req.on('close', () => clients.delete(res))
    return
  }

  if (req.method === 'POST' && req.url === '/log') {
    let body = '';
    
    req.on('data', chunk => {
      body += chunk.toString();
    });
    
    req.on('end', () => {
      try {
        let message, data, timestamp
        try {
          ({ message, data, timestamp } = JSON.parse(body))
        } catch (jsonErr) {
          // –§–æ–ª–±—ç–∫: –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã body (–Ω–∞–ø—Ä–∏–º–µ—Ä, "message:..." –∏–ª–∏ "message=...")
          const m1 = body.match(/message\s*[:=]\s*(.*)/i)
          message = m1 ? m1[1].trim() : String(body).trim()
          data = undefined
          timestamp = new Date().toISOString()
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å —Ü–≤–µ—Ç–∞–º–∏ (ANSI escape codes)
        const timeColor = '\x1b[90m'; // –°–µ—Ä—ã–π
        const messageColor = '\x1b[36m'; // Cyan
        const dataColor = '\x1b[33m'; // –ñ–µ–ª—Ç—ã–π
        const reset = '\x1b[0m';
        
        const line = `${timeColor}[${timestamp}]${reset} ${messageColor}${message}${reset}`
        console.log(line);
        
        if (data !== undefined && data !== null) {
          if (typeof data === 'object') {
            console.log(`${dataColor}${JSON.stringify(data, null, 2)}${reset}`);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ SSE –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            for (const client of clients) {
              client.write(`event: log\n`)
              client.write(`data: ${JSON.stringify({ timestamp, message, data })}\n\n`)
            }
          } else {
            console.log(`${dataColor}${data}${reset}`);
            for (const client of clients) {
              client.write(`event: log\n`)
              client.write(`data: ${JSON.stringify({ timestamp, message, data })}\n\n`)
            }
          }
        }
        if (data === undefined || data === null) {
          for (const client of clients) {
            client.write(`event: log\n`)
            client.write(`data: ${JSON.stringify({ timestamp, message })}\n\n`)
          }
        }
        
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ success: true }));
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–≥–∞:', error);
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Invalid JSON' }));
      }
    });
  } else if (req.method === 'POST' && req.url === '/api/analyze-image-gpt') {
    // –ù–û–í–´–ô ENDPOINT: YandexGPT —Å –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å—é (–ü–†–ò–û–†–ò–¢–ï–¢ 1)
    let body = '';
    
    req.on('data', chunk => {
      body += chunk.toString();
    });
    
    req.on('end', async () => {
      try {
        const { imageData, mimeType = 'image/jpeg' } = JSON.parse(body);
        
        if (!imageData) {
          res.writeHead(400, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({ error: 'Image data is required' }));
          return;
        }

        console.log('ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ YandexGPT API...');
        
        const gptData = await analyzeWithYandexGPT(imageData, mimeType);
        
        // –†–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –≥–æ—Ç–æ–≤ –æ—Ç –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ analyzeWithYandexGPT
        console.log('‚úÖ YandexGPT —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (Vision + GPT)');
        console.log('üìù –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', gptData.totalText?.substring(0, 100) + '...');
        console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:', gptData.totalWords);
        console.log('üéØ –ò—Å—Ç–æ—á–Ω–∏–∫:', gptData.source);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª—è–µ–º fontSize)
        const words = gptData.words.map(word => ({
          text: word.text,
          category: word.category,
          bbox: word.bbox, // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç Vision API
          fontSize: 14 // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        }));
        
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          success: true,
          text: gptData.totalText,
          words: words,
          totalWords: gptData.totalWords,
          source: gptData.source
        }));
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ analyze-image-gpt API:', error);
        res.writeHead(500, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ success: false, message: 'Internal server error', details: error.message }));
      }
    });
  } else if (req.method === 'POST' && req.url === '/api/analyze-image-vision') {
    // FALLBACK ENDPOINT: Yandex Vision API (–ü–†–ò–û–†–ò–¢–ï–¢ 2)
    let body = '';
    
    req.on('data', chunk => {
      body += chunk.toString();
    });
    
    req.on('end', async () => {
      try {
        const { imageData, mimeType = 'image/jpeg' } = JSON.parse(body);
        
        if (!imageData) {
          res.writeHead(400, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({ error: 'Image data is required' }));
          return;
        }

        console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Yandex Vision API (fallback)...');
        
        const visionData = await analyzeWithYandexVision(imageData, mimeType);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Yandex Vision API:', JSON.stringify(visionData, null, 2).substring(0, 500));
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Yandex Vision API
        if (visionData.results && visionData.results[0] && visionData.results[0].results && visionData.results[0].results[0] && visionData.results[0].results[0].textDetection) {
          const textDetection = visionData.results[0].results[0].textDetection;
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –±–ª–æ–∫–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
          const allText = [];
          const words = [];
          
          if (textDetection.pages && textDetection.pages[0]) {
            const page = textDetection.pages[0];
            
            if (page.blocks) {
              page.blocks.forEach((block) => {
                if (block.lines) {
                  block.lines.forEach((line) => {
                    if (line.words) {
                      line.words.forEach((word) => {
                        allText.push(word.text);
                        
                        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ Yandex Vision –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                        const vertices = word.boundingBox?.vertices || [];
                        if (vertices.length >= 4) {
                          const x0 = parseInt(vertices[0].x) || 0;
                          const y0 = parseInt(vertices[0].y) || 0;
                          const x1 = parseInt(vertices[2].x) || 0;
                          const y1 = parseInt(vertices[2].y) || 0;
                          
                          words.push({
                            text: word.text,
                            bbox: { x0, y0, x1, y1 },
                            confidence: word.confidence || 0
                          });
                        }
                      });
                    }
                  });
                }
              });
            }
          }

          console.log('‚úÖ Yandex Vision API —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
          console.log('üìù –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', allText.join(' ').substring(0, 100) + '...');
          console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:', words.length);

          res.writeHead(200, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({
            success: true,
            text: allText.join(' '),
            words: words,
            totalWords: words.length
          }));

        } else {
          console.log('‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏');
          res.writeHead(200, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({
            success: false,
            text: '',
            blocks: [],
            totalBlocks: 0,
            totalText: '',
            message: '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏'
          }));
        }

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Yandex Vision API:', error);
        res.writeHead(500, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
          error: 'Internal server error',
          details: error.message 
        }));
      }
    });
  } else if (req.method === 'POST' && req.url === '/api/classify-text') {
    // ENDPOINT: YandexGPT –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    let body = '';
    
    req.on('data', chunk => {
      body += chunk.toString();
    });
    
    req.on('end', async () => {
      try {
        const { text, context } = JSON.parse(body);
        
        if (!text) {
          res.writeHead(400, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({ error: 'Text is required' }));
          return;
        }
        
        const apiKey = process.env.YANDEX_GPT_API_KEY?.trim();
        const folderId = process.env.YANDEX_FOLDER_ID?.trim();
        
        if (!apiKey || !folderId) {
          res.writeHead(500, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({ error: 'YandexGPT API configuration missing' }));
          return;
        }
        
        const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏–∑ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ —Ç–∏–ø:

–¢–µ–∫—Å—Ç: "${text}"
–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context || '–º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞'}

–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø —Ç–µ–∫—Å—Ç–∞:
- "title" - –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –∑–∞–≥–æ–ª–æ–≤–æ–∫, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–µ–Ω—é
- "price" - —Ü–µ–Ω–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Å—É–º–º–∞
- "description" - –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —Å–æ—Å—Ç–∞–≤

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: title, price –∏–ª–∏ description`;
        
        console.log('ü§ñ GPT –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:', text.substring(0, 50) + '...');
        
        const result = await callYandexGPT(apiKey, folderId, prompt);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        if (result.result?.usage) {
          const usage = result.result.usage
          console.log('üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:')
          console.log(`   Input: ${usage.inputTextTokens || 0}, Output: ${usage.completionTokens || 0}, Total: ${usage.totalTokens || 0}`)
          const estimatedCost = ((usage.totalTokens || 0) / 1000) * 0.15
          console.log(`   üìä ~${estimatedCost.toFixed(4)}‚ÇΩ`)
        }
        
        const classification = result.result?.alternatives?.[0]?.message?.text?.trim().toLowerCase();
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        const validTypes = ['title', 'price', 'description'];
        const finalType = validTypes.includes(classification) ? classification : 'description';
        
        console.log('‚úÖ GPT –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª –∫–∞–∫:', finalType);
        
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          success: true,
          text,
          type: finalType,
          confidence: 0.9,
          source: 'yandex-gpt'
        }));
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ YandexGPT:', error);
        res.writeHead(500, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Internal server error', details: error.message }));
      }
    });
  } else {
    res.writeHead(404);
    res.end('Not found');
  }
});

server.listen(PORT, () => {
  console.log('\x1b[32m%s\x1b[0m', `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üöÄ –°–µ—Ä–≤–µ—Ä –ª–æ–≥–æ–≤ –∑–∞–ø—É—â–µ–Ω –Ω–∞ :${PORT}     ‚ïë
‚ïë   –õ–æ–≥–∏ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å ‚Üì      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
process.on('SIGINT', () => {
  console.log('\n\x1b[31m%s\x1b[0m', '‚úñ –°–µ—Ä–≤–µ—Ä –ª–æ–≥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  process.exit(0);
});

